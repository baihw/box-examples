<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wee0.box.examples.allInOne.dao.SysUserDao">
    <resultMap id="SysUser" type="com.wee0.box.examples.allInOne.entity.SysUserEntity">
        <id column="id" property="id" jdbcType="CHAR"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="user_pwd" property="userPwd" jdbcType="VARCHAR"/>
        <result column="nick_name" property="nickName" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="INTEGER"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="mobile" property="mobile" jdbcType="VARCHAR"/>
        <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="create_user" property="createUser" jdbcType="VARCHAR"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="update_user" property="updateUser" jdbcType="VARCHAR"/>
        <result column="is_deleted" property="isDeleted" jdbcType="BOOLEAN"/>
    </resultMap>

    <!-- 方便在sql节点中重用的列集合 -->
    <sql id="col_List">
		id, user_name as userName, user_pwd as userPwd, nick_name as nickName, sex, email, mobile, CREATE_TIME as createTime, create_user as createUser, update_time as updateTime, update_user as updateUser, is_deleted as isDeleted
	</sql>

    <!-- 测试查询返回映射实体对象集合，指定响应类型，需要自己处理列与字段映射关系 -->
    <select id="findAll" resultType="com.wee0.box.examples.allInOne.entity.SysUserEntity">
        SELECT
        <include refid="col_List"/>
        FROM SYS_USER
    </select>

    <!--测试分页查询，指定响应映射，在映射中设置好的列与字段映射关系 -->
    <select id="finaAllByPage" parameterType="map" resultMap="SysUser">
        SELECT *
        FROM SYS_USER SU
        <where>
            <if test="isDeleted!=null">
                SU.IS_DELETED=#{isDeleted}
            </if>
            <if test="sex!=null">
                AND SU.sex=#{sex}
            </if>
        </where>
        ORDER BY SU.ID DESC
    </select>

    <!-- 测试根据id查询返回唯一映射实体对象 -->
    <select id="findById" parameterType="java.lang.String" resultMap="SysUser">
        SELECT *
        FROM SYS_USER
        WHERE id = #{id}
    </select>

    <!-- 测试查询返回一条键值集合对象 -->
    <select id="findLimit1" resultType="java.util.HashMap">
		select id, user_name from SYS_USER order by id desc limit 1
	</select>

    <!-- 测试使用转义字符在语句中嵌入xml冲突字符，如：<(&lt;)，>(&gt;)，&(&amp;)，... -->
    <select id="findByCreateTime1" resultMap="SysUser">
        SELECT *
        FROM SYS_USER
        WHERE CREATE_TIME &gt;= #{arg0}
    </select>

    <!-- 测试使用CDATA在语句中嵌入xml冲突字符，如：<，>，... -->
    <select id="findByCreateTime2" resultMap="SysUser">
        SELECT *
        FROM SYS_USER
        WHERE
        <![CDATA[ CREATE_TIME >= #{endDt} ]]>
    </select>

    <!-- 测试更新 -->
    <update id="updatePassword">
        UPDATE SYS_USER
        <set>
            <if test="param1 != null and param1 != ''">
                user_pwd = #{param1}
            </if>
        </set>
        WHERE id = #{param2}
    </update>


    <!-- 测试直接执行sql -->
    <select id="nativeQuery" parameterType="string" resultType="java.util.LinkedHashMap">
		${value}
	</select>

</mapper>